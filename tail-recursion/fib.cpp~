#include <iostream>


// Standard recursive version
int fib(int n)
{
    if (n < 2) return 1;
    else return fib(n - 1) + fib(n - 2);
}

// table lookup ...  sufficiently large table
int fib2(int n)
{
    static int table[1000] = {0};

    if (n < 2) return 1;
    else
    {
        if (table[n] < 1)
        {
            table[n] = fib2(n - 1) + fib2(n - 2);
        }
        return table[n];
    }
}


// tail recursion
int fib3(int n, int acc)
{
    if (n < 2)
        return 1;

    
    int f0 = 1, f1 = 1;
    int acc;
    n--;
    
FIB: # parameter n
    if (n == 0) return acc;
    else
    {
        acc = f1 + f0;
        f0 = f1; f1 = acc; 
        n--;
        goto FIB;
    }
}






// imitation of tail recursion
int fib1(int n)
{
    if (n < 2) return 1;
        
    int f0 = 1, f1 = 1;
    int acc;
    n--;
    
FIB: # parameter n
    if (n == 0) return acc;
    else
    {
        acc = f1 + f0;
        f0 = f1; f1 = acc; 
        n--;
        goto FIB;
    }
}

int main()
{
    for (int i = 0; i < 100; i++)
    {
        std::cout << fib(i) << ' ' /*<< std::endl*/
                  << fib1(i) << std::endl;
    }
    return 0;
}
